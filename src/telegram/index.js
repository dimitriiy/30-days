import { Telegraf, Markup } from 'telegraf';
import cron from 'node-cron';
import { END_OF_DAY, SUCCESS_WEEK } from './messages.js';
import { database } from '../db.js';
import { logger } from '../../logger.js';
import config from '../../challenge.config.js';
import fs from 'fs';
import { Readable } from 'stream';
import { v7 } from 'uuid';
import { writeFile } from 'fs/promises';
import { message } from 'telegraf/filters';
import { finished } from 'stream/promises';

const RULES = [
  'üö´  –ù–µ –µ—Å—Ç—å –º—É—á–Ω–æ–µ ü•û, –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Ö–ª–µ–±–∞',
  'üö´ –ù–µ –µ—Å—Ç—å –∂–∞—Ä–µ–Ω–æ–µ ü•ì',
  'üö´ –ù–µ –µ—Å—Ç—å —Å–ª–∞–¥–∫–æ–µ üç¨, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ñ—Ä—É–∫—Ç–æ–≤ –¥–≤—É—Ö —Ñ—Ä—É–∫—Ç–æ–≤ –≤ –¥–µ–Ω—å üçèüçè',
  'üö´ –ù–µ –µ—Å—Ç—å —Ñ–∞—Å—Ç—Ñ—É–¥ üçü –∏ –ø—Ä–æ—á—É—é –≤—Ä–µ–¥–Ω—É—é –ø–∏—â—É',
  'üèÉüí™üßò –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞ 7–∫ —à–∞–≥–æ–≤',
];

//https://github.com/feathers-studio/telegraf-docs/blob/master/examples/keyboard-bot.ts
export async function startBot() {
  try {
    const bot = new Telegraf(process.env.BOT_TOKEN);
    bot.start(async (ctx) => {
      const { id, first_name, username } = ctx.message.chat;
      await database.addChatUser({ id, first_name, username });

      await ctx.reply(`${first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!`);
      await ctx.replyWithPhoto({ source: process.cwd() + '/src/telegram' + '/games.jpg' });
      const rules = RULES.map((s, i) => `${i + 1}. ${s}`).join('\n');
      ctx.reply(`–ü—Ä–∞–≤–∏–ª–∞:\n\n${rules}`);
    });
    // bot.on(message('text'), async (ctx) => {
    //   const text = ctx.message.text;
    //   const { id, first_name, username } = ctx.message.chat;
    //
    //   if (!isNaN(parseFloat(text))) {
    //     const user = database.getUsers().find((u) => u.telegram === username);
    //     if (!user) return;
    //     await database.editUser(user.id, { weight: +text });
    //     await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ–π –≤–µ—Å ${text} –∫–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.`);
    //
    //     bot.on('photo', async (ctx) => {
    //       try {
    //         const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    //
    //         const fileLink = await ctx.telegram.getFileLink(fileId);
    //         console.log(fileLink);
    //         // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    //         const res = await fetch(fileLink);
    //
    //         // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    //         const fileName = `./images/${v7()}.jpg`;
    //
    //         // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    //         await savePhoto(res, fileName);
    //         console.log({ user });
    //         await database.editUser(user.id, { diffPics: [...(user.diffPics ?? []), fileName] });
    //
    //         // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    //         const filePath = await ctx.telegram.getFileLink(fileId);
    //         console.log(`–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞: ${filePath}`);
    //
    //         await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!');
    //       } catch (error) {
    //         console.error(error);
    //         await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.');
    //       }
    //     });
    //   } else {
    //     ctx.reply(`–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!`);
    //   }
    // });
    bot.on('stop', () => console.log('STOP'));

    bot.help((ctx) => ctx.reply('Send me a sticker'));
    bot.on('sticker', (ctx) => ctx.reply('üëç'));
    bot.hears('hi', (ctx) => ctx.reply('Hey there'));

    // bot.command('custom', async (ctx) => {
    //   return await ctx.reply(
    //     'Custom buttons keyboard',
    //     Markup.keyboard([['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']])
    //       .oneTime()
    //       .resize()
    //   );
    // });
    //
    // bot.hears('üîç Search', (ctx) => ctx.reply('Yay!'));

    bot.launch();

    // Enable graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));

    startCron(bot);
  } catch (e) {
    console.log(e);
    logger.error('Init bot Error: ', e);
  }
}

const dailyReminder = (bot) => {
  cron.schedule('0 23 * * *', async () => {
    try {
      console.log('running a task every day', new Date().getDate());

      const currentDate = new Date().getDate();
      const [users, tasks, usersIds] = await Promise.all([
        database.getUsers(),
        database.getTask(),
        database.getChatIds(),
      ]);

      usersIds.forEach(({ id, first_name, username }) => {
        const currentUser = users.find(({ telegram }) => telegram === username);
        const isCurrentUserDoneToday = tasks[currentDate]?.includes(currentUser.id);

        if (!currentUser || isCurrentUserDoneToday) return;

        const name = first_name ?? username;
        bot.telegram.sendMessage(
          id,
          `${name} ü§ü\n\n${END_OF_DAY}üèÉüèÉ\n<a href="http://fatburn.ddimedrol.ru/">–ö–ª–∏–∫</a>`,
          {
            parse_mode: 'HTML',
          }
        );
      });
    } catch (e) {
      console.log(e);
      logger.error('dailyReminder Error: ', e);
    }
  });
};

const successfullWeekReminder = (bot) => {
  cron.schedule('10 15 * * *', async () => {
    console.log('running a task every day', new Date().getDate());

    const [users, usersIds, tasks] = await Promise.all([
      database.getUsers(),
      database.getChatIds(),
      database.getTask(),
    ]);

    usersIds.forEach(({ id, first_name, username }) => {
      const currentUser = users.find(({ telegram }) => telegram === username);

      if (!currentUser) return;

      const name = first_name ?? username;

      bot.telegram.sendMessage(
        id,
        `–î–æ–±—Ä—ã–π –¥–µ–Ω—å ${name}!\n\n –ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π FatBurn —á–µ–ª–ª–µ–Ω–¥–∂! üöÄüöÄüöÄüöÄ\n –°—Ç–∞–≤–∫–∏ —Ä–∞—Å—Ç—É—Ç - —É–∂–µ –Ω–∞ 4Ô∏è‚É£0Ô∏è‚É£Ô∏è–¥–Ω–µ–π!\n –°–µ–≥–æ–¥–Ω—è —Ä–∞–∑—É–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–µ—Å –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤ –∫–æ–Ω—Ü–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ —Å—Ä–∞–≤–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n`
      );
    });
  });
};

const dailyMorningReminder = (bot) => {
  cron.schedule('0 9 * * *', async () => {
    try {
      console.log('running a task every day', new Date().getDate());

      const [users, usersIds, tasks] = await Promise.all([
        database.getUsers(),
        database.getChatIds(),
        database.getTask(),
      ]);

      usersIds.forEach(({ id, first_name, username }) => {
        const currentUser = users.find(({ telegram }) => telegram === username);

        if (!currentUser) return;

        const name = first_name ?? username;

        const START_DATE = config.startDate;
        const END_DATE = config.endDate;

        const leftDays = getDiffInDays(new Date(), END_DATE);

        const passedDays = getDiffInDays(START_DATE, new Date()) + 1;
        const doneDays = Object.values(tasks).filter((userIds) => userIds.includes(currentUser.id));

        bot.telegram.sendMessage(id, `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ ${name}!\n\n–î–æ –∫–æ–Ω—Ü–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –æ—Å—Ç–∞–ª–æ—Å—å ${leftDays} –¥–Ω–µ–π!\n`);
      });
    } catch (e) {
      console.log(e);
      logger.error('dailyMorningReminder Error: ', e);
    }
  });
};
function startCron(bot) {
  console.log(bot);

  dailyReminder(bot);
  // successfullWeekReminder(bot);
  dailyMorningReminder(bot);
}

function getDiffInDays(d1, d2) {
  const diffTime = Math.abs(d2 - d1);
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

  return diffDays;
}

async function savePhoto(data, fileName) {
  try {
    const path = `./photos/${fileName}`;
    const body = Readable.fromWeb(data.body);
    const fileStream = fs.createWriteStream(fileName);
    await finished(body.pipe(fileStream));
    console.log(`–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${path}`);
  } catch (err) {
    console.error(err);
  }
}
